git 学习 笔记
// 提交之前 先查看修改状态 git status	
一.基本操作
	1.配置用户
		1.1: git config --global user.name "用户名"
		1.2: git config --global user.email "电子邮件地址"
	2.选择目录 创建 库
		2.1: cd 目录名: 进入指定目录(这个目录是将来要做的项目目录 比如,我想把我的项目放到 D 盘...)
		2.2: mkdir 文件夹       (这个文件夹 可以 作为项目文件夹)
		2.3: cd 文件夹          (进入刚刚创建的文件夹)
		2.4: pwd                (查看 文件夹 完整目录)
	3.项目加入版本控制
		3.1: git init           (把这个目录变成Git可以管理的仓库)
		3.2: ls -ah             (查看隐藏文件)
	4.将文件添加到版本库
		4.1: git add 文件名     (将文件添加到版本库当中 此时还没有提交)
		4.2: git commit -m "提交说明" (将文件提交到版本库中)
		4.3: git commit 成功提示说明
			4.3.1: *file changed    (*个文件被改动)
			4.3.2: *insertion       (插入 * 行内容)
			4.3.3: 为什么Git添加文件需要add，commit一共两步？
				因为commit可以一次提交很多文件，所以你可以多次add不同的文件
	5.查看库的当前状态
		5.1: git status         
				 (查看库的当前状态: git告诉我们当前文件有没有被修改过 有修改可以使用git diff 查看哪里被修改)
			5.1.1: On branch master   (在主分支上)
			5.1.2: changed not staged for commit (分支更改未提交)
			5.1.3: (use "git add <file>..." to update what will be committed)
						 使用 "git add <file>..." 命令将更新内容添加到暂存区
			5.1.4: (use "git checkout --<file>..." to discard changes in working directory)
						 使用 "git checkout --<file>..." 命令 丢弃工作中目录的更改 
			5.1.5: no changes added to commit
						 没有任何更改增加到提交中
			5.1.6: Changes to be committed
						 将要提交的修改包括
			5.1.7: nothing to commit, working tree clean
						 没有需要提交的修改,工作树很干净
			5.1.6: 单词解释
						 modified : 被修改
						 changed  : 更改 / 修改
						 staged   : 分层 / 分段 / 分支
						 checkout : 检出
						 discard  : 丢弃
						 directory: 目录
						 branch   : 分支
						 master   : 主要
	6.查看更改差异
		6.1: git diff <file>     (查看具体修改内容)
二.版本退回
	1.git log: 查看历史记录
		1.1 git log: 显示从最近到最远的提交日志
		1.2 git log --pretty oneline: 将输出的历史信息 简化为一行 
			修改信息前的 一串字符 commit ID
		1.3 git 版本表示
			1.3.1 HEAD: 表示当前版本(也就是最近提交的版本)
			1.3.2 HEAD^: 表示上一个版本
			1.3.3 HEAD^^: 表示上上个版本
	2.git reset --hard HEAD^
		将版本退回到上一版
	3.git reset --hard commitID
		撤销退回版本操作
	4.cat 文件名.后缀 
		查看内容
	5.git reflog
		记录每条命令
	注意:
		1.HEAD 指向当前版本
		2.使用 git reset --hard commitID 命令 退回到指定版本
		3.退回前 先查看提交历史 git log 以便确定 要退回那个版本
		4.git reflog 命令查看命令历史 以便确定 回到未来那个版本
三.工作区 和 暂存区
	1.工作区(working Directory):
		learngit 文件夹 就是工作区	
	2.版本库
		2.1:
			.git 文件夹不是 工作区 是 版本库
		2.2:
			版本库中有很多东西 其中最重要的就是stage(或者称:index)的暂存区
		2.3:
			git 自动创建的一个分支 master 以及 指向 master 的指针 HEAD
	3. 工作流程
		工作区中的文件 add 到版本库中的 暂存区(stage/index)中 commit 到 master(分支) 中,HEAD指针指向 master 中的版本
	4.把文件 添加 到版本库中操作步骤
		1.git add 把文件添加到暂存区
		2.git commit 把暂存区所有内容 添加到当前分支
		3.解释
			当创建 git 版本库时 git 会自动创建唯一分支(master分支) git commit 就是往 master 分支上 提交 更改
			简单理解 需要提交的文件 统统放到暂存区 然后一次性 提交 暂存区 所有更改
四.管理修改
	1.什么是修改:
		增加一行是修改
		减少一行是修改
		删除一行是修改
		更改某些字符也是修改
	2.为什么说git管理的是修改(文中 修改内容不限 )
		2.1:对 readme 文件 做修改 增加一行
			2.1.1: cat readme.txt
			2.2.2: add readme.txt
			2.3.3: git status
		2.2:再次修改 readme 文件
			2.2.1 cat readme.txt
		3.提交
			3.1: commit readme -m"修改了文件"
			3.2: git status
		问题: 第二次 修改 没有被提交
		原因: Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，
					准备提交，但是，在工作区的第二次修改并没有放入暂存区，
					所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。
	3.git diff HEAD -- readme.txt
		查看工作区和版本库里面最新版本的区别
五.撤销修改
	1.git checkout --<file> 命令 可丢弃工作区修改
		1.1: git checkout --readme.txt   把readme.txt文件在工作区的修改全部撤销
		1.2: 两种情况
			1.2.1: readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态
			1.2.2: readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
		1.3: 总之，就是让这个文件回到最近一次git commit或git add时的状态
		注意:
			git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令。
	2.撤销暂存区修改
		2.1: git reset HEAD <file> 
			git reset HEAD <file> 命令 可以把暂存区的修改撤销掉（unstage），重新放回工作区
			git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。用HEAD时，表示最新的版本。
	3.丢弃工作区的修改
		git checkout --readme.txt
	4.小结:
		场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退，不过前提是没有推送到远程库。




	
	


		
	

		
		
		
		
